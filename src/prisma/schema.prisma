datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum RatingTitle {
  Recommended
  Meh
  Exceptional
  Skip
}


model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  password              String?
  role                  UserRole               @default(USER)
  image                 String?
  accounts              Account[]
  personalData          PersonalData?
  cart                  Cart?
  cartHistory           CartHistory[]
  orderHistory          OrderHistory[]
  wishList              WishList?
  order                 Order[]
  reviews               Review[]
  reviewsLikers         ReviewLikers[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model PersonalData {
  id           String   @id @default(cuid())
  userId       String
  fullName     String? 
  birthDate    DateTime?   
  address      String? 
  state        String? 
  zipCode      String?  
  city         String?  
  country      String?  
  phoneNumber  String?  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Cart {
  id        String          @id @default(cuid())
  userId    String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  products  Product[]
  order     Order[]
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartHistory {
  id        String           @id @default(cuid())
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  products  ProductHistory[]
  orderHistory OrderHistory[]
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}


model WishList {
  id        String      @id @default(cuid())
  userId    String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  products  Product[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id         String     @id @default(cuid())
  userId     String     
  productId  String     
  createdAt  DateTime   @default(now()) 
  updatedAt  DateTime   @updatedAt   
  rating     Rating?   
  likes      Int        @default(0)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  reviewLikers     ReviewLikers[]  
}

model ReviewLikers {
  id        String   @id @default(cuid())
  userId    String
  productId String
  reviewId  String
  isLiked   Boolean
  createdAt DateTime @default(now())
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product  Product @relation(fields: [productId], references:[id], onDelete: Cascade)
  review   Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, reviewId])
}

model Rating {
  id          String   @id @default(cuid())
  reviewId    String   @unique
  title       RatingTitle
  description String
  rating      Int
  percent     Float
  review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Product {
  id                   String                @id @default(cuid())
  externalProductId    Int                   
  cartId               String?     
  wishListId           String?
  userId               String?
  quantity             Int?
  productsInformations ProductInformations? 
  reviewLikers         ReviewLikers[]
  reviews              Review[]     
  cart                 Cart?                 @relation(fields: [cartId], references: [id], onDelete: Cascade)
  wishList             WishList?             @relation(fields: [wishListId], references: [id], onDelete: Cascade)
}

model ProductHistory {
  id                   String                @id @default(cuid())
  externalProductId    Int                   
  cartId               String    
  userId               String
  quantity             Int
  productsInformations ProductInformations? 
  cartHistory          CartHistory          @relation(fields: [cartId], references: [id], onDelete: Cascade)
  keys                 Key[]
}

model Order {
  id               String   @id @default(cuid())
  userId           String
  cartId           String   
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  status           String   
  title            String   
  paymentMethod    String
  paymentIntentId  String
  total            Float
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cart             Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model OrderHistory {
  id             String        @id @default(cuid())
  userId         String
  cartId         String?
  cartHistoryId  String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  status         String
  title          String
  paymentMethod  String
  paymentIntentId String
  total          Float
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartHistory    CartHistory?   @relation(fields: [cartHistoryId], references: [id], onDelete: Cascade)
  keys           Key[]
}


model Key {
  id        String   @id @default(cuid())
  orderHistoryId   String
  productHistoryId String   
  key       String    
  createdAt DateTime  @default(now())
  orderHistory    OrderHistory     @relation(fields: [orderHistoryId], references: [id], onDelete: Cascade)
  productHistory    ProductHistory   @relation(fields: [productHistoryId], references: [id], onDelete: Cascade)
}


model ProductInformations {
  id                   String        @id @default(cuid())
  productId            String?   @unique
  productHistoryId     String?  @unique
  name                 String       
  slug                 String
  description          String?
  rating               Float?
  released             String?
  added                Float?
  price                Float
  background_image     String?
  product              Product?      @relation(fields: [productId], references: [id])
  productHistory       ProductHistory?  @relation(fields: [productHistoryId], references: [id])

}




