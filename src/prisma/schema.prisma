datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  role                  UserRole               @default(USER)
  image                 String?
  accounts              Account[]
  cart                  Cart?
  wishlist              Wishlist?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Cart {
  id        String          @id @default(cuid())
  userId    String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  products  Product[]
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String      @id @default(cuid())
  userId    String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  products  Product[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id                   String                @id @default(cuid())
  externalProductId    Int
  cartId               String?     
  wishListId           String?
  quantity             Int?
  productsInformations ProductInformations?
  cart                 Cart?                 @relation(fields: [cartId], references: [id], onDelete: Cascade)
  wishlist             Wishlist?             @relation(fields: [wishListId], references: [id], onDelete: Cascade)
}

model ProductInformations {
  id              String         @id @default(cuid())
  productId       String?
  name            String
  description     String?
  rating          Int?
  price           Float
  imageUrl        String?
  product         Product?       @relation(fields: [productId], references: [id])

  @@unique([productId])
}
